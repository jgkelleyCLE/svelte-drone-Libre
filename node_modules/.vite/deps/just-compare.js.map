{
  "version": 3,
  "sources": ["../../just-compare/index.mjs"],
  "sourcesContent": ["var collectionCompare = compare;\n\n/*\n  primitives: value1 === value2\n  functions: value1.toString == value2.toString\n  arrays: if length, sequence and values of properties are identical\n  objects: if length, names and values of properties are identical\n  compare([[1, [2, 3]], [[1, [2, 3]]); // true\n  compare([[1, [2, 3], 4], [[1, [2, 3]]); // false\n  compare({a: 2, b: 3}, {a: 2, b: 3}); // true\n  compare({a: 2, b: 3}, {b: 3, a: 2}); // true\n  compare({a: 2, b: 3, c: 4}, {a: 2, b: 3}); // false\n  compare({a: 2, b: 3}, {a: 2, b: 3, c: 4}); // false\n  compare([[1, [2, {a: 4}], 4], [[1, [2, {a: 4}]]); // true\n*/\n\nfunction compare(value1, value2) {\n  if (value1 === value2) {\n    return true;\n  }\n\n  /* eslint-disable no-self-compare */\n  // if both values are NaNs return true\n  if (value1 !== value1 && value2 !== value2) {\n    return true;\n  }\n\n  if (\n    typeof value1 != typeof value2 || // primitive != primitive wrapper\n    {}.toString.call(value1) != {}.toString.call(value2) // check for other (maybe nullish) objects\n  ) {\n    return false;\n  }\n\n  if (value1 !== Object(value1)) {\n    // non equal primitives\n    return false;\n  }\n\n  if (!value1) {\n    return false;\n  }\n\n  if (Array.isArray(value1)) {\n    return compareArrays(value1, value2);\n  }\n\n  if ({}.toString.call(value1) == '[object Set]') {\n    return compareArrays(Array.from(value1), Array.from(value2));\n  }\n\n  if ({}.toString.call(value1) == '[object Object]') {\n    return compareObjects(value1, value2);\n  }\n\n  return compareNativeSubtypes(value1, value2);\n}\n\nfunction compareNativeSubtypes(value1, value2) {\n  // e.g. Function, RegExp, Date\n  return value1.toString() === value2.toString();\n}\n\nfunction compareArrays(value1, value2) {\n  var len = value1.length;\n\n  if (len != value2.length) {\n    return false;\n  }\n\n  for (var i = 0; i < len; i++) {\n    if (!compare(value1[i], value2[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction compareObjects(value1, value2) {\n  var keys1 = Object.keys(value1);\n  var len = keys1.length;\n\n  if (len != Object.keys(value2).length) {\n    return false;\n  }\n\n  for (var i = 0; i < len; i++) {\n    var key1 = keys1[i];\n\n    if (!(value2.hasOwnProperty(key1) && compare(value1[key1], value2[key1]))) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport {collectionCompare as default};\n"],
  "mappings": ";;;AAAA,IAAI,oBAAoB;AAgBxB,SAAS,QAAQ,QAAQ,QAAQ;AAC/B,MAAI,WAAW,QAAQ;AACrB,WAAO;AAAA,EACT;AAIA,MAAI,WAAW,UAAU,WAAW,QAAQ;AAC1C,WAAO;AAAA,EACT;AAEA,MACE,OAAO,UAAU,OAAO;AAAA,EACxB,CAAC,EAAE,SAAS,KAAK,MAAM,KAAK,CAAC,EAAE,SAAS,KAAK,MAAM,GACnD;AACA,WAAO;AAAA,EACT;AAEA,MAAI,WAAW,OAAO,MAAM,GAAG;AAE7B,WAAO;AAAA,EACT;AAEA,MAAI,CAAC,QAAQ;AACX,WAAO;AAAA,EACT;AAEA,MAAI,MAAM,QAAQ,MAAM,GAAG;AACzB,WAAO,cAAc,QAAQ,MAAM;AAAA,EACrC;AAEA,MAAI,CAAC,EAAE,SAAS,KAAK,MAAM,KAAK,gBAAgB;AAC9C,WAAO,cAAc,MAAM,KAAK,MAAM,GAAG,MAAM,KAAK,MAAM,CAAC;AAAA,EAC7D;AAEA,MAAI,CAAC,EAAE,SAAS,KAAK,MAAM,KAAK,mBAAmB;AACjD,WAAO,eAAe,QAAQ,MAAM;AAAA,EACtC;AAEA,SAAO,sBAAsB,QAAQ,MAAM;AAC7C;AAEA,SAAS,sBAAsB,QAAQ,QAAQ;AAE7C,SAAO,OAAO,SAAS,MAAM,OAAO,SAAS;AAC/C;AAEA,SAAS,cAAc,QAAQ,QAAQ;AACrC,MAAI,MAAM,OAAO;AAEjB,MAAI,OAAO,OAAO,QAAQ;AACxB,WAAO;AAAA,EACT;AAEA,WAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC5B,QAAI,CAAC,QAAQ,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG;AAClC,aAAO;AAAA,IACT;AAAA,EACF;AAEA,SAAO;AACT;AAEA,SAAS,eAAe,QAAQ,QAAQ;AACtC,MAAI,QAAQ,OAAO,KAAK,MAAM;AAC9B,MAAI,MAAM,MAAM;AAEhB,MAAI,OAAO,OAAO,KAAK,MAAM,EAAE,QAAQ;AACrC,WAAO;AAAA,EACT;AAEA,WAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC5B,QAAI,OAAO,MAAM,CAAC;AAElB,QAAI,EAAE,OAAO,eAAe,IAAI,KAAK,QAAQ,OAAO,IAAI,GAAG,OAAO,IAAI,CAAC,IAAI;AACzE,aAAO;AAAA,IACT;AAAA,EACF;AAEA,SAAO;AACT;",
  "names": []
}
