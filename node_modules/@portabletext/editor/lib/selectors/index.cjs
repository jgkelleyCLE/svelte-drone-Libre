"use strict";
Object.defineProperty(exports, "__esModule", { value: !0 });
var selector_isOverlappingSelection = require("../_chunks-cjs/selector.is-overlapping-selection.cjs"), types = require("@sanity/types"), selector_isAtTheStartOfBlock = require("../_chunks-cjs/selector.is-at-the-start-of-block.cjs"), util_sliceBlocks = require("../_chunks-cjs/util.slice-blocks.cjs"), selector_getTextBefore = require("../_chunks-cjs/selector.get-text-before.cjs");
const getActiveAnnotations = (snapshot) => {
  if (!snapshot.context.selection)
    return [];
  const selectedBlocks = selector_isAtTheStartOfBlock.getSelectedBlocks(snapshot), selectedSpans = selector_isOverlappingSelection.getSelectedSpans(snapshot);
  return selectedSpans.length === 0 ? [] : selectedBlocks.flatMap((block) => types.isPortableTextTextBlock(block.node) ? block.node.markDefs ?? [] : []).filter((markDef) => selectedSpans.some((span) => span.node.marks?.includes(markDef._key)));
}, getAnchorBlock = (snapshot) => {
  const key = snapshot.context.selection && util_sliceBlocks.isKeyedSegment(snapshot.context.selection.anchor.path[0]) ? snapshot.context.selection.anchor.path[0]._key : void 0, node = key ? snapshot.context.value.find((block) => block._key === key) : void 0;
  return node && key ? {
    node,
    path: [{
      _key: key
    }]
  } : void 0;
}, getAnchorTextBlock = (snapshot) => {
  const anchorBlock = getAnchorBlock(snapshot);
  return anchorBlock && types.isPortableTextTextBlock(anchorBlock.node) ? {
    node: anchorBlock.node,
    path: anchorBlock.path
  } : void 0;
}, getAnchorChild = (snapshot) => {
  const anchorBlock = getAnchorTextBlock(snapshot);
  if (!anchorBlock)
    return;
  const key = snapshot.context.selection && util_sliceBlocks.isKeyedSegment(snapshot.context.selection.anchor.path[2]) ? snapshot.context.selection.anchor.path[2]._key : void 0, node = key ? anchorBlock.node.children.find((span) => span._key === key) : void 0;
  return node && key ? {
    node,
    path: [...anchorBlock.path, "children", {
      _key: key
    }]
  } : void 0;
}, getAnchorSpan = (snapshot) => {
  const anchorChild = getAnchorChild(snapshot);
  return anchorChild && types.isPortableTextSpan(anchorChild.node) ? {
    node: anchorChild.node,
    path: anchorChild.path
  } : void 0;
}, getBlockOffsets = (snapshot) => {
  if (!snapshot.context.selection)
    return;
  const selectionStartPoint = selector_isAtTheStartOfBlock.getSelectionStartPoint(snapshot), selectionEndPoint = selector_isAtTheStartOfBlock.getSelectionEndPoint(snapshot);
  if (!selectionStartPoint || !selectionEndPoint)
    return;
  const start = util_sliceBlocks.spanSelectionPointToBlockOffset({
    value: snapshot.context.value,
    selectionPoint: selectionStartPoint
  }), end = util_sliceBlocks.spanSelectionPointToBlockOffset({
    value: snapshot.context.value,
    selectionPoint: selectionEndPoint
  });
  return start && end ? {
    start,
    end
  } : void 0;
}, getFocusInlineObject = (snapshot) => {
  const focusChild = selector_isAtTheStartOfBlock.getFocusChild(snapshot);
  return focusChild && !types.isPortableTextSpan(focusChild.node) ? {
    node: focusChild.node,
    path: focusChild.path
  } : void 0;
}, getSelection = (snapshot) => snapshot.context.selection, getValue = (snapshot) => snapshot.context.value;
exports.getActiveListItem = selector_isOverlappingSelection.getActiveListItem;
exports.getActiveStyle = selector_isOverlappingSelection.getActiveStyle;
exports.getSelectedSpans = selector_isOverlappingSelection.getSelectedSpans;
exports.getTrimmedSelection = selector_isOverlappingSelection.getTrimmedSelection;
exports.isActiveAnnotation = selector_isOverlappingSelection.isActiveAnnotation;
exports.isActiveDecorator = selector_isOverlappingSelection.isActiveDecorator;
exports.isActiveListItem = selector_isOverlappingSelection.isActiveListItem;
exports.isActiveStyle = selector_isOverlappingSelection.isActiveStyle;
exports.isOverlappingSelection = selector_isOverlappingSelection.isOverlappingSelection;
exports.isPointAfterSelection = selector_isOverlappingSelection.isPointAfterSelection;
exports.isPointBeforeSelection = selector_isOverlappingSelection.isPointBeforeSelection;
exports.isSelectingEntireBlocks = selector_isOverlappingSelection.isSelectingEntireBlocks;
exports.getCaretWordSelection = selector_isAtTheStartOfBlock.getCaretWordSelection;
exports.getFirstBlock = selector_isAtTheStartOfBlock.getFirstBlock;
exports.getFocusBlock = selector_isAtTheStartOfBlock.getFocusBlock;
exports.getFocusBlockObject = selector_isAtTheStartOfBlock.getFocusBlockObject;
exports.getFocusChild = selector_isAtTheStartOfBlock.getFocusChild;
exports.getFocusListBlock = selector_isAtTheStartOfBlock.getFocusListBlock;
exports.getFocusSpan = selector_isAtTheStartOfBlock.getFocusSpan;
exports.getFocusTextBlock = selector_isAtTheStartOfBlock.getFocusTextBlock;
exports.getLastBlock = selector_isAtTheStartOfBlock.getLastBlock;
exports.getNextBlock = selector_isAtTheStartOfBlock.getNextBlock;
exports.getNextInlineObject = selector_isAtTheStartOfBlock.getNextInlineObject;
exports.getPreviousBlock = selector_isAtTheStartOfBlock.getPreviousBlock;
exports.getPreviousInlineObject = selector_isAtTheStartOfBlock.getPreviousInlineObject;
exports.getSelectedBlocks = selector_isAtTheStartOfBlock.getSelectedBlocks;
exports.getSelectedSlice = selector_isAtTheStartOfBlock.getSelectedSlice;
exports.getSelectionEndBlock = selector_isAtTheStartOfBlock.getSelectionEndBlock;
exports.getSelectionEndPoint = selector_isAtTheStartOfBlock.getSelectionEndPoint;
exports.getSelectionStartBlock = selector_isAtTheStartOfBlock.getSelectionStartBlock;
exports.getSelectionStartPoint = selector_isAtTheStartOfBlock.getSelectionStartPoint;
exports.getSelectionText = selector_isAtTheStartOfBlock.getSelectionText;
exports.isAtTheEndOfBlock = selector_isAtTheStartOfBlock.isAtTheEndOfBlock;
exports.isAtTheStartOfBlock = selector_isAtTheStartOfBlock.isAtTheStartOfBlock;
exports.isSelectionCollapsed = selector_isAtTheStartOfBlock.isSelectionCollapsed;
exports.isSelectionExpanded = selector_isAtTheStartOfBlock.isSelectionExpanded;
exports.getBlockTextBefore = selector_getTextBefore.getBlockTextBefore;
exports.getActiveAnnotations = getActiveAnnotations;
exports.getAnchorBlock = getAnchorBlock;
exports.getAnchorChild = getAnchorChild;
exports.getAnchorSpan = getAnchorSpan;
exports.getAnchorTextBlock = getAnchorTextBlock;
exports.getBlockOffsets = getBlockOffsets;
exports.getFocusInlineObject = getFocusInlineObject;
exports.getSelection = getSelection;
exports.getValue = getValue;
//# sourceMappingURL=index.cjs.map
