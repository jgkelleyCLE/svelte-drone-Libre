import { Args, Command, Flags } from '@oclif/core';
import { testAction } from '../../actions/functions/test.js';
export default class Test extends Command {
    static args = {
        path: Args.string({ description: 'The path to the function source code', required: true }),
    };
    static description = 'Invoke a local Sanity Function';
    static examples = [
        `<%= config.bin %> <%= command.id %> ./test.ts --data '{ "id": 1 }'`,
        `<%= config.bin %> <%= command.id %> ./test.js --file 'payload.json'`,
        `<%= config.bin %> <%= command.id %> ./test.ts --data '{ "id": 1 }' --timeout 60`,
    ];
    static flags = {
        data: Flags.string({ char: 'd', description: 'Data to send to the function', required: false }),
        file: Flags.string({
            char: 'f',
            description: 'Read data from file and send to the function',
            required: false,
        }),
        timeout: Flags.integer({
            char: 't',
            description: 'Execution timeout value in seconds',
            required: false,
        }),
    };
    async run() {
        const { args, flags } = await this.parse(Test);
        const { json, logs, error } = await testAction(args.path, {
            data: flags.data,
            file: flags.file,
            timeout: flags.timeout,
        });
        if (!error) {
            this.log('Logs:');
            this.log(logs);
            this.log('Response:');
            this.log(JSON.stringify(json, null, 2));
        }
        else {
            this.log(error.toString());
        }
    }
}
