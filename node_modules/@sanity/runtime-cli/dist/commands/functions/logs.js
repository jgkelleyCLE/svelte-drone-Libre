import { Args, Command } from '@oclif/core';
import readBlueprintOnDisk from '../../actions/blueprints/read-blueprint.js';
import { logs } from '../../actions/functions/logs.js';
import config from '../../config.js';
import { bold, red, yellow } from '../../utils/display/colors.js';
import Spinner from '../../utils/spinner.js';
export default class Logs extends Command {
    static args = {
        id: Args.string({ description: 'The ID of the function to retrieve logs for', required: true }),
    };
    static description = 'Retrieve logs for a Sanity Function';
    static examples = ['<%= config.bin %> <%= command.id %> <ID>'];
    async run() {
        const { args } = await this.parse(Logs);
        const s = new Spinner();
        const { deployedStack } = await readBlueprintOnDisk({ getStack: true });
        if (!deployedStack)
            this.error('Stack not found'); // returns
        s.start(`Finding logs for function "${args.id}"`);
        const { name, projectId } = deployedStack;
        const result = await logs(args.id, { token: config.token, projectId });
        console.log(JSON.stringify(result, null, 2));
        if (result.ok) {
            s.stop(`Found logs ${args.id} for blueprint "${name}"`);
            for (const logGroup of result.logs) {
                for (const log of logGroup.events) {
                    const date = new Date(log.timestamp);
                    const time = date.toLocaleTimeString();
                    const day = date.toLocaleDateString();
                    this.log(`  ${bold(day)} ${yellow(time)} ${log.message}`);
                }
            }
        }
        else {
            s.stop(`${red('Failed')} to retrieve logs`);
            this.log(`Error: ${result.error || 'Unknown error'}`);
        }
    }
}
