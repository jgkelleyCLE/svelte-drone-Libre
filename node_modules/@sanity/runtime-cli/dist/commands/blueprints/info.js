import { Command } from '@oclif/core';
import readBlueprintOnDisk from '../../actions/blueprints/read-blueprint.js';
import { formatResourceTree } from '../../utils/display/blueprints-formatting.js';
import { bold, green, red, yellow } from '../../utils/display/colors.js';
import { formatDate, formatDuration } from '../../utils/display/dates.js';
export default class Info extends Command {
    static description = 'Show information about a Blueprint';
    static examples = ['<%= config.bin %> <%= command.id %>'];
    async run() {
        const { errors, deployedStack } = await readBlueprintOnDisk({ getStack: true });
        if (errors.length > 0) {
            // printErrors(errors)
            this.log('Blueprint parse errors:');
            console.dir(errors, { depth: null });
            return;
        }
        if (!deployedStack)
            this.error('Stack not found'); // returns
        try {
            this.log(`Stack name: ${bold(deployedStack.name)}`);
            this.log(`Stack ID: ${yellow(deployedStack.id)}`);
            if (deployedStack.createdAt) {
                this.log(`Created: ${formatDate(deployedStack.createdAt)}`);
            }
            if (deployedStack.updatedAt) {
                this.log(`Updated: ${formatDate(deployedStack.updatedAt)}`);
            }
            if (deployedStack.recentOperation) {
                const operation = deployedStack.recentOperation;
                if (operation.id) {
                    this.log(`Recent Operation <${yellow(operation.id)}>:`);
                }
                if (operation.status) {
                    const operationColor = operation.status === 'COMPLETED' ? green : red;
                    const status = operation.status || 'UNKNOWN';
                    this.log(`  Status: ${operationColor(status)}`);
                }
                if (operation.createdAt) {
                    this.log(`  Started  : ${formatDate(operation.createdAt)}`);
                }
                if (operation.status === 'COMPLETED' && operation.completedAt && operation.createdAt) {
                    this.log(`  Completed: ${formatDate(operation.completedAt)}`);
                    this.log(`  Duration: ${yellow(formatDuration(operation.createdAt, operation.completedAt))}`);
                }
            }
            this.log('');
            if (deployedStack.resources) {
                formatResourceTree(deployedStack.resources, this.log.bind(this));
            }
        }
        catch (err) {
            if (err instanceof Error) {
                this.log(`Error: ${err.message}`);
            }
        }
    }
}
